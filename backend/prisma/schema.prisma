// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  name      String?
  avatar    String?
  reputation Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questions Question[]
  answers   Answer[]
  votes     Vote[]

  @@map("users")
}

model Question {
  id          String   @id @default(cuid())
  title       String
  content     String
  tags        String[]
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answers     Answer[]
  votes       Vote[]

  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorId   String
  questionId String

  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes      Vote[]

  @@map("answers")
}

model Vote {
  id         String    @id @default(cuid())
  value      Int       // 1 for upvote, -1 for downvote
  createdAt  DateTime  @default(now())
  userId     String
  questionId String?
  answerId   String?

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer     Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@unique([userId, answerId])
  @@map("votes")
}